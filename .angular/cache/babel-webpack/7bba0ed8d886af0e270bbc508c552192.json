{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../message.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../error-message/error-message.component\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/icon\";\nconst _c0 = [\"errorMessageComponent\"];\n\nfunction ResetPasswordComponent_form_5_label_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 18);\n    i0.ɵɵtext(1, \" Password is Required! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_form_5_label_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 18);\n    i0.ɵɵtext(1, \" Password do not match \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_form_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 7);\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelementStart(2, \"mat-form-field\");\n    i0.ɵɵelementStart(3, \"mat-label\", 9);\n    i0.ɵɵtext(4, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 10);\n    i0.ɵɵelementStart(6, \"button\", 11);\n    i0.ɵɵlistener(\"mousedown\", function ResetPasswordComponent_form_5_Template_button_mousedown_6_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.hide = false;\n    })(\"mouseup\", function ResetPasswordComponent_form_5_Template_button_mouseup_6_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.hide = true;\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"label\", 12);\n    i0.ɵɵelementStart(10, \"i\", 13);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \" Must have a least 8 characters \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵelementStart(14, \"label\", 12);\n    i0.ɵɵelementStart(15, \"i\", 13);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \" Must contain at least 1 number \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"br\");\n    i0.ɵɵelementStart(19, \"label\", 12);\n    i0.ɵɵelementStart(20, \"i\", 13);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \" Must contain at least 1 in Capital Case \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"br\");\n    i0.ɵɵelementStart(24, \"label\", 12);\n    i0.ɵɵelementStart(25, \"i\", 13);\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(27, \" Must contain at least 1 Letter in Small Case \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(28, \"br\");\n    i0.ɵɵelementStart(29, \"label\", 12);\n    i0.ɵɵelementStart(30, \"i\", 13);\n    i0.ɵɵtext(31);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(32, \" Must contain at least 1 Special Character (? ! . * ' ') \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"div\", 8);\n    i0.ɵɵelementStart(34, \"mat-form-field\");\n    i0.ɵɵelementStart(35, \"mat-label\", 9);\n    i0.ɵɵtext(36, \"Confirm Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(37, \"input\", 14);\n    i0.ɵɵelementStart(38, \"button\", 11);\n    i0.ɵɵlistener(\"mousedown\", function ResetPasswordComponent_form_5_Template_button_mousedown_38_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.hideConfirm = false;\n    })(\"mouseup\", function ResetPasswordComponent_form_5_Template_button_mouseup_38_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.hideConfirm = true;\n    });\n    i0.ɵɵelementStart(39, \"mat-icon\");\n    i0.ɵɵtext(40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(41, ResetPasswordComponent_form_5_label_41_Template, 2, 0, \"label\", 15);\n    i0.ɵɵtemplate(42, ResetPasswordComponent_form_5_label_42_Template, 2, 0, \"label\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(43, \"div\", 16);\n    i0.ɵɵelementStart(44, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function ResetPasswordComponent_form_5_Template_button_click_44_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.changePassword();\n    });\n    i0.ɵɵtext(45, \"Change Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.frmPassword);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].invalid ? \"text-danger\" : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"type\", ctx_r0.hide ? \"password\" : \"text\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx_r0.hide);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.hide ? \"visibility_off\" : \"visibility\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"minlength\") ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"minlength\") ? \"cancel\" : \"check_circle\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasNumber\") ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasNumber\") ? \"cancel\" : \"check_circle\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasCapitalCase\") ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasCapitalCase\") ? \"cancel\" : \"check_circle\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasSmallCase\") ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasSmallCase\") ? \"cancel\" : \"check_circle\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasSpecialCharacters\") ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.frmPassword.controls[\"password\"].hasError(\"required\") || ctx_r0.frmPassword.controls[\"password\"].hasError(\"hasSpecialCharacters\") ? \"cancel\" : \"check_circle\", \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.frmPassword.controls[\"confirmPassword\"].invalid ? \"text-danger\" : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"type\", ctx_r0.hideConfirm ? \"password\" : \"text\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-label\", \"Hide confirmPassword\")(\"aria-pressed\", ctx_r0.hide);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.hideConfirm ? \"visibility_off\" : \"visibility\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.frmPassword.controls[\"confirmPassword\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.frmPassword.controls[\"confirmPassword\"].hasError(\"noPasswordMatch\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.frmPassword.invalid);\n  }\n}\n\nfunction ResetPasswordComponent_mat_card_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 19);\n    i0.ɵɵtext(1, \" Password changed successfully. Return to login page in 5 seconds \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(msg, route, router, fb) {\n      this.msg = msg;\n      this.route = route;\n      this.router = router;\n      this.fb = fb; // Those 2 information are retrieved in the link of the page.\n\n      this.validToken = false; // Boolean that save the information given by the backend about the validity of the token\n\n      this.passwordChanged = false; // Boolean that indicate if we succeed in changing the password\n      // (control the display of the validation message).\n\n      this.hide = true;\n      this.hideConfirm = true; // Booleans that control the temporary display of the password and its confirmation\n    } // First verification if the token.\n    // If token is invalid, the form for changing password isn't created (nor displayed).\n\n\n    ngOnInit() {\n      this.token = this.route.snapshot.paramMap.get('token');\n      this.email = this.route.snapshot.paramMap.get('email');\n      const data = {\n        token: this.token,\n        email: this.email\n      }; // this.msg.Create('verifyResetPassword', data).subscribe(\n      //   res => {\n      //     if (res.status === 'error')  {\n      //       this.errorMessage.sendError(res.data.reason);\n      //     }\n      //     else {\n      //       this.validToken = true;\n      //\n      //       // Initialization of the FormGroup for entering the password and its confirmation.\n      //       this.frmPassword = ResetPasswordComponent.createChangePasswordForm(this.fb);\n      //     }\n      //   }\n      // )\n    } // Test the value of the control against the regexp supplied.\n    // If control is empty or test is true, return no error (null)\n    // Else, return error passed in the second parameter\n\n\n    static patternValidator(regex, error) {\n      return control => {\n        let code;\n\n        if (!control.value || regex.test(control.value)) {\n          code = null;\n        } else {\n          code = error;\n        }\n\n        return code;\n      };\n    } // Return a ValidationErrors used in 'options' in 'fb.group'.\n    // Return null if nothing to do (no errors).\n\n\n    static passwordMatchValidator(control) {\n      const password = control.get('password').value; // get password from our password form control\n\n      const confirmPassword = control.get('confirmPassword').value; // get password from our confirmPassword form control\n\n      let code = null; // If passwords don't match, set an error in our confirmPassword form control\n\n      if (password !== confirmPassword) {\n        control.get('confirmPassword').setErrors({\n          noPasswordMatch: true\n        });\n        code = control;\n      }\n\n      return code;\n    } // Creation of a FormGroup for entering the password and its confirmation.\n    // Contains 2 configs witch defines rules for entering data:\n    //    password\n    //    confirmPassword\n\n\n    static createChangePasswordForm(fb) {\n      return fb.group({\n        password: [null, Validators.compose([Validators.required, Validators.minLength(8), // Check whether the entered password has a number\n        ResetPasswordComponent.patternValidator(/\\d/, {\n          hasNumber: true\n        }), // Check whether the entered password has upper case letter\n        ResetPasswordComponent.patternValidator(/[A-Z]/, {\n          hasCapitalCase: true\n        }), // Check whether the entered password has a lower case letter\n        ResetPasswordComponent.patternValidator(/[a-z]/, {\n          hasSmallCase: true\n        }), // Check whether the entered password has a special character\n        ResetPasswordComponent.patternValidator(/[ ?!.*\\s]/, {\n          hasSpecialCharacters: true\n        })])],\n        confirmPassword: [null, Validators.compose([Validators.required])]\n      }, {\n        validators: [// Check whether our password and confirm password match\n        ResetPasswordComponent.passwordMatchValidator]\n      });\n    } // Gather the data needed for the reset of the password and call the corresponding route of backend.\n\n\n    changePassword() {// const data = {\n      //   token: this.token,\n      //   email: this.email,\n      //   password1: this.frmPassword.value.password,\n      //   password2: this.frmPassword.value.confirmPassword\n      // }\n      //\n      // this.msg.Update(, data).subscribe(\n      //   res => {\n      //     if (res.status === 'error')  {\n      //       this.validToken = false;\n      //\n      //       this.errorMessage.sendError(res.data.reason);\n      //     }\n      //     else {\n      //       this.passwordChanged = true;\n      //\n      //       setTimeout(\n      //         () => {\n      //           this.router.navigateByUrl('/login').then();\n      //         },\n      //         5000\n      //       );\n      //     }\n      //   }\n      // )\n    }\n\n  }\n\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    viewQuery: function ResetPasswordComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.errorMessage = _t.first);\n      }\n    },\n    decls: 13,\n    vars: 2,\n    consts: [[\"id\", \"resetContainer\", 1, \"popupGroupField\"], [3, \"formGroup\", 4, \"ngIf\"], [\"id\", \"resetFormResults\"], [\"errorMessageComponent\", \"\"], [\"id\", \"passwordConfirmation\", 4, \"ngIf\"], [\"id\", \"loginRedirect\"], [\"routerLink\", \"/login\", 1, \"underlineHover\"], [3, \"formGroup\"], [1, \"form-group\"], [3, \"ngClass\"], [\"matInput\", \"\", \"id\", \"password\", \"formControlName\", \"password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"mousedown\", \"mouseup\"], [1, \"col\", 3, \"ngClass\"], [1, \"material-icons\"], [\"matInput\", \"\", \"id\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", 3, \"type\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\", \"ButtonFooter\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [1, \"text-danger\"], [\"id\", \"passwordConfirmation\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"mat-card-header\");\n        i0.ɵɵelementStart(2, \"mat-card-title\");\n        i0.ɵɵtext(3, \"Enter your new password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-card-content\");\n        i0.ɵɵtemplate(5, ResetPasswordComponent_form_5_Template, 46, 24, \"form\", 1);\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵelement(7, \"app-error-message\", null, 3);\n        i0.ɵɵtemplate(9, ResetPasswordComponent_mat_card_9_Template, 2, 0, \"mat-card\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-card-footer\", 5);\n        i0.ɵɵelementStart(11, \"a\", 6);\n        i0.ɵɵtext(12, \"Return to login page\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.validToken);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordChanged && ctx.validToken);\n      }\n    },\n    directives: [i4.MatCard, i4.MatCardHeader, i4.MatCardTitle, i4.MatCardContent, i5.NgIf, i6.ErrorMessageComponent, i4.MatCardFooter, i2.RouterLinkWithHref, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i7.MatFormField, i7.MatLabel, i5.NgClass, i8.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i9.MatButton, i7.MatSuffix, i10.MatIcon],\n    styles: [\"\"]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}