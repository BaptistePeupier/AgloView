{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.registerUrl = environment.apiHost + 'api/register';\n      this.loginUrl = environment.apiHost + 'api/login';\n      this.emailUrl = environment.apiHost + 'api/email';\n    } // -- Login the user\n    // postLogin(data): Promise<void | LoginResponse> {\n    //   return this.http.post(this.loginUrl, data, null)\n    //              .toPromise()\n    //              .then(response => response as ListItem[])\n    //              .catch(null); // handle error\n    // }\n    // postLogin(data: any): Observable<LoginResponse> {\n    //   const httpOptions = {\n    //     headers: new HttpHeaders({\n    //       'Content-Type':  'application/json',\n    //       'Authorization': 'my-auth-token'\n    //     })\n    //   };\n    //\n    // return this.http.post<LoginResponse>(this.loginUrl, data, httpOptions)\n    //   .pipe(\n    //     // console.log(\"error\")\n    //     // catchError(this.handleError('error', data))\n    //   );\n\n\n    getEmail() {\n      return this.http.get(this.emailUrl).toPromise().then(response => response).catch(null); // handle error\n    }\n\n    postRegister(body) {\n      return this.http.post(this.registerUrl, body).toPromise().then(response => response).catch(null); // handle error\n    }\n\n    postLogin(body) {\n      // let body = new HttpParams() // not needed when 'body' is a function parameter\n      // body = body.set('client_id', env.client_id) // you can manipulate 'body' like this\n      // body = body.set('client_secret', env.client_secret)\n      return this.http.post(this.loginUrl, body).toPromise().then(response => response).catch(null); // handle error\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}