{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(msg, router) {\n      this.msg = msg;\n      this.router = router;\n      this.authenticated = false; // Boolean that indicate if the user is logged (so he can access the web application).\n\n      this.role = \"\"; // Value that indicate the type of the user.\n    } // Initiate the login process with the backend using Message Service and the login and password gaven by the user.\n    // Return an Observable on a ResponseData.\n\n\n    sendAuthentication(email, password, role) {\n      const data = {\n        email: email,\n        password: password\n      }; // Reinitialize authentication's variables every time a user connects.\n\n      this.authenticated = false;\n      this.role = \"\";\n      return this.msg.Create('login' + role, data);\n    } // When the backend has returned it's response it save it (the status \"logged\" or not) and save the user ID.\n    // Also, save the admin status of the user with the response from the backend. It may be used to give special functionalities to admins.\n    // It need to be called in the login Component (view details in the README file).\n\n\n    finalizeAuthentication(message) {\n      if (message.status === 'error') {\n        this.authenticated = false;\n        this.role = \"\";\n      } else {\n        this.authenticated = true;\n        this.userID = message.data._id;\n        this.role = message.data.role;\n        this.userName = message.data.pseudo;\n        this.email = message.data.email;\n      }\n    } // Return the authentication status of the user\n\n\n    isAuthenticated() {\n      return this.authenticated;\n    }\n\n    isUser() {\n      return this.role === \"user\";\n    }\n\n    isAnnonceur() {\n      return this.role === \"annonceur\";\n    }\n\n    isAdmin() {\n      return this.role === \"admin\";\n    } // userID's getter\n\n\n    getId() {\n      return this.userID;\n    } // userName's getter\n\n\n    getUserName() {\n      return this.userName;\n    } // userName's setter\n\n\n    setUserName(newUserName) {\n      this.userName = newUserName;\n    } // Delete the JWT's cookie (HttpOnly so we need to do it in the backend),\n    // reset the authentication's variables and return to the main page of the web application.\n\n\n    logout() {\n      this.msg.Create('logout', null).subscribe();\n      this.authenticated = false;\n      this.role = \"\";\n      this.router.navigateByUrl('').then();\n    }\n\n    getEmail() {\n      return this.email;\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}